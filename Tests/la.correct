CORRECT OUTPUTS FOR THE TESTS IN THE TEST FOLDER. 
Test: isPos.s

---------------------------------------------------------------------------
Running isPos.binary without saving any registers 0x0000 0000. Correct Output:
0x0080006f
0x01c0006f
0x0fc10417
0xff840413
0x00042483
0x00148493
0x00942023
0xfe9ff06f
0x00008067
0xffffffff

Translated Correct Output from isPos.binary without saving any registers 0x0000 0000:
0000000000010000:  0080006f          j             8                               # 0x10008        (jump to Function_Main label)
0000000000010004:  01c0006f          j             28                              # 0x10020        (originally the return statement, now jump to the start of the exit node)
0000000000010008:  0fc10417          auipc         s0,264306688                    # 0xfc20008      (disassembler gets auipc instructions wrong. IGNORE THE AUIPC INSTRUCTIONS SINCE THEY SHOULD NOT BE CHANGED BY THE SOLUTION)
000000000001000c:  ff840413          addi          s0,s0,-8                                         (immediate in the load address here does not change since we inserted 0 bytes at the start of the function)
0000000000010010:  00042483          lw            s1,0(s0)
0000000000010014:  00148493          addi          s1,s1,1
0000000000010018:  00942023          sw            s1,0(s0)
000000000001001c:  fe9ff06f          j             -24                             # 0x10004        (jump to Function_End label)
0000000000010020:  00008067          ret                                                            (start of the exit node)
0000000000010024:  00000000ffffffff  illegal                                                        (sentinel value)

Note: anything in brackets ( ) is a comment and is not part of the output.

---------------------------------------------------------------------------
Running isPos.binary with default RISC-V register conventions 0x0FFC 0304. Correct Output:
0xff810113
0x00812023
0x00912223
0x0080006f
0x01c0006f
0x0fc10417
0xfec40413
0x00042483
0x00148493
0x00942023
0xfe9ff06f
0x00012403
0x00412483
0x00810113
0x00008067
0xffffffff

Translated Correct Output from isPos.binary with default RISC-V register conventions 0x0FFC 0304:
0000000000010000:  ff810113          addi          sp,sp,-8
0000000000010004:  00812023          sw            s0,0(sp)
0000000000010008:  00912223          sw            s1,4(sp)
000000000001000c:  0080006f          j             8                               # 0x10014        (jump to Function_Main label)
0000000000010010:  01c0006f          j             28                              # 0x1002c        (originally the return statement, now jump to the start of the exit node)
0000000000010014:  0fc10417          auipc         s0,264306688                    # 0xfc20014      (disassembler gets auipc instructions wrong. IGNORE THE AUIPC INSTRUCTIONS SINCE THEY SHOULD NOT BE CHANGED BY THE SOLUTION)
0000000000010018:  fec40413          addi          s0,s0,-20                                        (originally addi s0, s0, -8. Since we inserted 12 bytes at the start of the function, we need to subtract 12 from the immediate).
000000000001001c:  00042483          lw            s1,0(s0)
0000000000010020:  00148493          addi          s1,s1,1
0000000000010024:  00942023          sw            s1,0(s0)
0000000000010028:  fe9ff06f          j             -24                             # 0x10010        (jump to Function_End label)
000000000001002c:  00012403          lw            s0,0(sp)                                         (start of the exit node)
0000000000010030:  00412483          lw            s1,4(sp)
0000000000010034:  00810113          addi          sp,sp,8
0000000000010038:  00008067          ret    
000000000001003c:  00000000ffffffff  illegal                                                        (sentinel value)                                    

Note: anything in brackets ( ) is a comment and is not part of the output.

---------------------------------------------------------------------------
Running isPos.binary saving all registers 0xFFFF FFFF. Correct Output:
0xff410113
0x00012023
0x00812223
0x00912423
0x0080006f
0x01c0006f
0x0fc10417
0xfe840413
0x00042483
0x00148493
0x00942023
0xfe9ff06f
0x00012003
0x00412403
0x00812483
0x00c10113
0x00008067
0xffffffff

Translated Correct Output from isPos.binary saving all registers 0xFFFF FFFF:
0000000000010000:  ff410113          addi          sp,sp,-12
0000000000010004:  00012023          sw            zero,0(sp)
0000000000010008:  00812223          sw            s0,4(sp)
000000000001000c:  00912423          sw            s1,8(sp)
0000000000010010:  0080006f          j             8                               # 0x10018        (jump to Function_Main label)
0000000000010014:  01c0006f          j             28                              # 0x10030        (originally the return statement, now jump to the start of the exit node)
0000000000010018:  0fc10417          auipc         s0,264306688                    # 0xfc20018      (disassembler gets auipc instructions wrong. IGNORE THE AUIPC INSTRUCTIONS SINCE THEY SHOULD NOT BE CHANGED BY THE SOLUTION)
000000000001001c:  fe840413          addi          s0,s0,-24                                        (originally addi s0, s0, -8. Since we inserted 16 bytes at the start of the function, we need to subtract 16 from the immediate).
0000000000010020:  00042483          lw            s1,0(s0)
0000000000010024:  00148493          addi          s1,s1,1
0000000000010028:  00942023          sw            s1,0(s0)
000000000001002c:  fe9ff06f          j             -24                             # 0x10014        (jump to Function_End label)
0000000000010030:  00012003          lw            zero,0(sp)                                       (start of the exit node)
0000000000010034:  00412403          lw            s0,4(sp)
0000000000010038:  00812483          lw            s1,8(sp)
000000000001003c:  00c10113          addi          sp,sp,12
0000000000010040:  00008067          ret
0000000000010044:  00000000ffffffff  illegal                                                        (sentinel value)                            

Note: anything in brackets ( ) is a comment and is not part of the output.