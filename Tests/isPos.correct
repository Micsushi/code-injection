CORRECT OUTPUTS FOR THE TESTS IN THE TEST FOLDER. 
Test: isPos.s

---------------------------------------------------------------------------
Running isPos.binary without saving any registers 0x0000 0000. Correct Output:
0x00a00433
0x00040663
0x02044a63
0x0200006f
0x12345297
0x00430293
0x00000417
0x01340413
0x12345a17
0x001a5a13
0x0240006f
0x0fc10517
0xfd450513
0x00400893
0x0140006f
0x0fc10517
0xfc650513
0x00400893
0x0040006f
0x00008067
0xffffffff

Translated Correct Output from isPos.binary without saving any registers 0x0000 0000:
0000000000010000:  00a00433          add           s0,zero,a0
0000000000010004:  00040663          beqz          s0,12                           # 0x10010
0000000000010008:  02044a63          bltz          s0,52                           # 0x1003c
000000000001000c:  0200006f          j             32                              # 0x1002c        (jump to NumIsPos label)
0000000000010010:  12345297          auipc         t0,305418240                    # 0x12355010
0000000000010014:  00430293          addi          t0,t1,4
0000000000010018:  00000417          auipc         s0,0                            # 0x10018
000000000001001c:  01340413          addi          s0,s0,19
0000000000010020:  12345a17          auipc         s4,305418240                    # 0x12355020
0000000000010024:  001a5a13          srli          s4,s4,1
0000000000010028:  0240006f          j             36                              # 0x1004c        (originally a ret, now jumps to exit node)
000000000001002c:  0fc10517          auipc         a0,264306688                    # 0xfc2002c      (the disassembler gets auipc immediates wrong. IGNORE AUIPC INSTRUCTIONS BECAUSE THE SOLUTION SHOULDN'T CHANGE THEM AT ALL.)
0000000000010030:  fd450513          addi          a0,a0,-44                                        (the location of the load address doesn't change since we didn't insert any instructions at the start of the function)
0000000000010034:  00400893          addi          a7,zero,4
0000000000010038:  0140006f          j             20                              # 0x1004c        (originally a ret, now jumps to exit node)
000000000001003c:  0fc10517          auipc         a0,264306688                    # 0xfc2003c      (the disassembler gets auipc immediates wrong. IGNORE AUIPC INSTRUCTIONS BECAUSE THE SOLUTION SHOULDN'T CHANGE THEM AT ALL.)
0000000000010040:  fc650513          addi          a0,a0,-58                                        (the location of the load address doesn't change since we didn't insert any instructions at the start of the function)
0000000000010044:  00400893          addi          a7,zero,4
0000000000010048:  0040006f          j             4                               # 0x1004c        (originally a ret, now jumps to exit node)
000000000001004c:  00008067          ret                                                            (start of the exit node)
0000000000010050:  00000000ffffffff  illegal                                                        (sentinel value)

Note: anything in brackets ( ) is a comment and is not part of the output.

---------------------------------------------------------------------------
Running isPos.binary with default RISC-V register conventions 0x0FFC 0304. Correct Output:
0xff810113
0x00812023
0x01412223
0x00a00433
0x00040663
0x02044a63
0x0200006f
0x12345297
0x00430293
0x00000417
0x01340413
0x12345a17
0x001a5a13
0x0240006f
0x0fc10517
0xfc850513
0x00400893
0x0140006f
0x0fc10517
0xfba50513
0x00400893
0x0040006f
0x00012403
0x00412a03
0x00810113
0x00008067
0xffffffff

Translated Correct Output from isPos.binary with default RISC-V register conventions 0x0FFC 0304:
0000000000010000:  0xff810113          addi          sp,sp,-8
0000000000010004:  0x00812023          sw            s0,0(sp)
0000000000010008:  0x01412223          sw            s4,4(sp)
000000000001000c:  0x00a00433          add           s0,zero,a0
0000000000010010:  0x00040663          beqz          s0,12                           # 0x1001c
0000000000010014:  0x02044a63          bltz          s0,52                           # 0x10048
0000000000010018:  0x0200006f          j             32                              # 0x10038        (jump to NumIsPos label)
000000000001001c:  0x12345297          auipc         t0,305418240                    # 0x1235501c 
0000000000010020:  0x00430293          addi          t0,t1,4
0000000000010024:  0x00000417          auipc         s0,0                            # 0x10024
0000000000010028:  0x01340413          addi          s0,s0,19
000000000001002c:  0x12345a17          auipc         s4,305418240                    # 0x1235502c
0000000000010030:  0x001a5a13          srli          s4,s4,1
0000000000010034:  0x0240006f          j             36                              # 0x10058        (originally a ret, now jumps to exit node)
0000000000010038:  0x0fc10517          auipc         a0,264306688                    # 0xfc20038      (the disassembler gets auipc immediates wrong. IGNORE AUIPC INSTRUCTIONS BECAUSE THE SOLUTION SHOULDN'T CHANGE THEM AT ALL.)
000000000001003c:  0xfc850513          addi          a0,a0,-56                                        (originally addi a0, a0, -44. Since we inserted 12 bytes at the start of the function, we need to subtract 12 from the original offset here.)
0000000000010040:  0x00400893          addi          a7,zero,4
0000000000010044:  0x0140006f          j             20                              # 0x10058        (originally a ret, now jumps to exit node)
0000000000010048:  0x0fc10517          auipc         a0,264306688                    # 0xfc20048      (the disassembler gets auipc immediates wrong. IGNORE AUIPC INSTRUCTIONS BECAUSE THE SOLUTION SHOULDN'T CHANGE THEM AT ALL.)
000000000001004c:  0xfba50513          addi          a0,a0,-70                                        (originally addi a0, a0, -58. Since we inserted 12 bytes at the start of the function, we need to subtract 12 from the original offset here.)
0000000000010050:  0x00400893          addi          a7,zero,4
0000000000010054:  0x0040006f          j             4                               # 0x10058        (originally a ret, now jumps to exit node)
0000000000010058:  0x00012403          lw            s0,0(sp)                                         (start of the exit node)
000000000001005c:  0x00412a03          lw            s4,4(sp)
0000000000010060:  0x00810113          addi          sp,sp,8
0000000000010064:  0x00008067          ret      
0000000000010068:  0xffffffff  illegal                                                        (sentinel value)


Note: anything in brackets ( ) is a comment and is not part of the output.

---------------------------------------------------------------------------
Running isPos.binary saving all registers 0xFFFF FFFF. Correct Output:
0xfe810113
0x00012023
0x00512223
0x00812423
0x00a12623
0x01112823
0x01412a23
0x00a00433
0x00040663
0x02044a63
0x0200006f
0x12345297
0x00430293
0x00000417
0x01340413
0x12345a17
0x001a5a13
0x0240006f
0x0fc10517
0xfb850513
0x00400893
0x0140006f
0x0fc10517
0xfaa50513
0x00400893
0x0040006f
0x00012003
0x00412283
0x00812403
0x00c12503
0x01012883
0x01412a03
0x01810113
0x00008067
0xffffffff

Translated Correct Output from isPos.binary saving all registers 0xFFFF FFFF:
0000000000010000:  fe810113          addi          sp,sp,-24
0000000000010004:  00012023          sw            zero,0(sp)
0000000000010008:  00512223          sw            t0,4(sp)
000000000001000c:  00812423          sw            s0,8(sp)
0000000000010010:  00a12623          sw            a0,12(sp)
0000000000010014:  01112823          sw            a7,16(sp)
0000000000010018:  01412a23          sw            s4,20(sp)
000000000001001c:  00a00433          add           s0,zero,a0
0000000000010020:  00040663          beqz          s0,12                           # 0x1002c
0000000000010024:  02044a63          bltz          s0,52                           # 0x10058
0000000000010028:  0200006f          j             32                              # 0x10048        (jump to NumIsPos label)
000000000001002c:  12345297          auipc         t0,305418240                    # 0x1235502c
0000000000010030:  00430293          addi          t0,t1,4
0000000000010034:  00000417          auipc         s0,0                            # 0x10034
0000000000010038:  01340413          addi          s0,s0,19
000000000001003c:  12345a17          auipc         s4,305418240                    # 0x1235503c     
0000000000010040:  001a5a13          srli          s4,s4,1
0000000000010044:  0240006f          j             36                              # 0x10068        (originally a ret, now jumps to exit node)
0000000000010048:  0fc10517          auipc         a0,264306688                    # 0xfc20048      (the disassembler gets auipc immediates wrong. IGNORE AUIPC INSTRUCTIONS BECAUSE THE SOLUTION SHOULDN'T CHANGE THEM AT ALL.)
000000000001004c:  fb850513          addi          a0,a0,-72                                        (originally addi a0, a0, -44. Since we inserted 28 bytes at the start of the function, we need to subtract 16 from the original offset here.)
0000000000010050:  00400893          addi          a7,zero,4
0000000000010054:  0140006f          j             20                              # 0x10068        (originally a ret, now jumps to exit node)
0000000000010058:  0fc10517          auipc         a0,264306688                    # 0xfc20058
000000000001005c:  faa50513          addi          a0,a0,-86                                        (originally addi a0, a0, -58. Since we inserted 28 bytes at the start of the function, we need to subtract 16 from the original offset here.)
0000000000010060:  00400893          addi          a7,zero,4    
0000000000010064:  0040006f          j             4                               # 0x10068        (originally a ret, now jumps to exit node)
0000000000010068:  00012003          lw            zero,0(sp)                                       (start of the exit node)
000000000001006c:  00412283          lw            t0,4(sp)
0000000000010070:  00812403          lw            s0,8(sp)
0000000000010074:  00c12503          lw            a0,12(sp)
0000000000010078:  01012883          lw            a7,16(sp)
000000000001007c:  01412a03          lw            s4,20(sp)
0000000000010080:  01810113          addi          sp,sp,24
0000000000010084:  00008067          ret                                                            
0000000000010088:  00000000ffffffff  illegal                                                        (sentinel value)

Note: anything in brackets ( ) is a comment and is not part of the output.